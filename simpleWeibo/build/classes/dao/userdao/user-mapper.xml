<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dao.userdao.IUserDao">
	<insert id="insertUser">
		insert into user (userName,age,sex,email,phone,remark,touxiang,password) 
			values 
			(#{name}, 
			 #{age,jdbcType=NUMERIC},
			 #{sex,jdbcType=VARCHAR},
			 #{email,jdbcType=VARCHAR},
			 #{phone,jdbcType=VARCHAR},
			 #{remark,jdbcType=VARCHAR},
			 #{touxiang,jdbcType=VARCHAR},
			 #{password,jdbcType=VARCHAR})
	</insert>
	
	<insert id="focusOn">
		INSERT INTO 
			fans_focus (fansId, focusPeopleId)
		VALUES
			(#{fansId}, #{focusPeopleId})
	</insert>
	
	<update id="haveNewAboutMe" parameterType="Integer">
		UPDATE `user`
		SET aboutMe = aboutMe + 1
		WHERE userId = #{userId}
	</update>
	
	<update id="cleanAboutMe" parameterType="Integer">
		UPDATE `user`
		SET aboutMe = 0
		WHERE userId = #{userId}
	</update>
	
	<update id="updateUser">
		UPDATE `user`
		<trim prefix="set" suffixOverrides=",">
			<if test="name != null">
				userName = #{name},
			</if>
			<if test="age != null">	
				age = #{age,jdbcType=NUMERIC},
			</if>
			<if test="sex != null">
				sex = #{sex,jdbcType=VARCHAR},	
			</if>
			<if test="email != null">
				email = #{email,jdbcType=VARCHAR},	
			</if>
			<if test="phone != null">	
				phone = #{phone,jdbcType=VARCHAR}, 
			</if>
			<if test="remark != null">	
				remark = #{remark,jdbcType=VARCHAR},
			</if>
			<if test="touxiang != null">	
				touxiang = #{touxiang,jdbcType=VARCHAR},
			</if>
			<if test="password != null">
				password = #{password,jdbcType=VARCHAR}, 	
			</if>
		</trim>
		WHERE userId = #{userId}
	</update>
	
	<update id="increaseFans">
		UPDATE `user`
		SET fansNum = fansNum + 1
		WHERE
			userId = #{userId}
	</update>
	
	<update id="increaseFocusPeople">
		UPDATE `user`
		SET focusPeopleNum = focusPeopleNum + 1
		WHERE
			userId = #{userId}
	</update>
	
	<update id="reduceFans">
		UPDATE `user`
		SET fansNum = fansNum - 1
		WHERE
			userId = #{userId}
	</update>
	
	<update id="reduceFocusPeople">
		UPDATE `user`
			SET focusPeopleNum = focusPeopleNum - 1
			WHERE
				userId = #{userId}
	</update>
	
	<delete id="takeOf">
		DELETE
		FROM
			fans_focus
		WHERE
			fansId = #{fansId}
		AND 
			focusPeopleId = #{focusPeopleId}
	</delete>
	
	<delete id="deleteUser">
		delete from user where userId = #{userId}
	</delete>
	
	<resultMap type="entity.User" id="user">
		<result property="userId" column="userId"/>
		<result property="name" column="userName"/>
		<result property="age" column="age"/>
		<result property="sex" column="sex"/>
		<result property="email" column="email"/>
		<result property="phone" column="phone"/>
		<result property="remark" column="remark"/>
		<result property="type" column="type"/>
		<result property="touxiang" column="touxiang"/>
		<result property="messageNum" column="messageNum"/>
		<result property="fansNum" column="fansNum"/>
		<result property="password" column="password"/>
		<result property="aboutMe" column="aboutMe"/>
		<result property="focusPeopleNum" column="focusPeopleNum"/>
	</resultMap>
	
	<select id="findUserById" parameterType="Integer" resultMap="user">
		SELECT
			u.userId,u.userName,u.age,u.sex,u.email,
			u.phone,u.remark,u.touxiang,u.messageNum,u.fansNum,
			u.focusPeopleNum,u.aboutMe
		FROM
			`user` u
		WHERE
			u.userId = #{id}
	</select>

	<select id="findUserByIdChange" parameterType="Integer" resultMap="user">
		SELECT
			u.userId,u.userName,u.age,u.sex,u.email,u.password,
			u.phone,u.remark,u.touxiang,u.messageNum,u.fansNum,
			u.focusPeopleNum,u.aboutMe
		FROM
			`user` u
		WHERE
			u.userId = #{id}
	</select>

	<select id="findUserByName" parameterType="String" resultMap="user">
		SELECT
			u.userId,u.userName
		FROM
			`user` u
		where
			userName = #{name}
	</select>
	
	<select id="findUserByPhone" parameterType="String" resultMap="user">
		SELECT
			u.userId,u.userName,u.age,u.sex,u.email,u.password,
			u.phone,u.remark,u.touxiang,u.messageNum,u.fansNum,
			u.focusPeopleNum,u.type
		FROM
			`user` u
		where
			phone = #{phone}
	</select> 
	
	<resultMap type="entity.User" id="userList">
		<result property="userId" column="userId"/>
		<result property="age" column="age"/>
		<result property="sex" column="sex"/>
		<result property="email" column="email"/>
		<result property="phone" column="phone"/>
		<result property="remark" column="remark"/>
		<result property="touxiang" column="touxiang"/>
	</resultMap>
	
	<select id="findFansByUserId" resultMap="user">
		SELECT 
			u.userId, u.userName, u.touxiang, u.remark
		FROM
			fans_focus f
		LEFT JOIN `user` u on f.fansId = u.userId
		WHERE
			f.focusPeopleId = #{userId}
		<if test="currentPage != null and pageSize != null">
			LIMIT #{currentPage}, #{pageSize}
		</if>
	</select>
	
	<select id="findFocusPeoplesByUserId" resultMap="user">
		SELECT 
			u.userId, u.userName, u.touxiang, u.remark
		FROM
			fans_focus f
		LEFT JOIN `user` u on f.focusPeopleId = u.userId
		WHERE
			f.fansId = #{userId}
		<if test="currentPage != null and pageSize != null">
			LIMIT #{currentPage}, #{pageSize}
		</if>
	</select>
	
	<select id="findTotalUsers" resultType="Integer">
		select 
			count(DISTINCT userId)
		from 
			`user`
	</select>
	
	<select id="findAllUsers" resultMap="user">
		select 
			u.userId,u.userName,u.age,u.sex,u.email,
			u.phone,u.remark,u.touxiang,u.messageNum,u.fansNum,
			u.focusPeopleNum,u.aboutMe 
		from 
			`user` u
		<if test="currentPage != null and pageSize != null">
			LIMIT #{currentPage}, #{pageSize}
		</if>
	</select>
	
	<select id="isFocus" resultType="Integer">
		SELECT
			id
		FROM
			fans_focus
		WHERE
			fansId = #{fansId} AND focusPeopleId = #{focusPeopleId}
	</select>
	
</mapper>