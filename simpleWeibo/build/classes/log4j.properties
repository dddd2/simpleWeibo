#输出级别的种类由低到高 TRACE、DEBUG、INFO、WARN、ERROR、FATAL（设为OFF可以关闭日志）

#控制日志信息最低输出级别和输出方式
log4j.logger.dao.userdao.IUserDao=TRACE,console
log4j.logger.dao.messagedao.IMessageDao=TRACE,console
log4j.logger.dao.commentdao.IMessageDao=TRACE,console
#在控制台输出日志信息
#定义日志信息的输出类型,console是自定义的名字。
#可选的输出类型：
#	1、org.apache.log4j.ConsoleAppender（控制台）
# 	2、org.apache.log4j.FileAppender（文件）
#	3、org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）
#	4、org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）
#	5、org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
log4j.appender.console=org.apache.log4j.ConsoleAppender
#把日志输出到系统标准输出设备中,默认为System.out（系统标准输出设备） 可选（System.err）
log4j.appender.console.Target=System.out
#指定日志信息的最低输出级别，默认为DEBUG。
log4j.appender.console.Threshold=TRACE
#定义日志信息的输出端是那种类型。
#可选类型：
#	1、org.apache.log4j.HTMLLayout（以HTML表格形式布局）
#	2、org.apache.log4j.PatternLayout（可以灵活地指定布局模式）
#	3、org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串）
#	4、org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
log4j.appender.console.layout=org.apache.log4j.PatternLayout
#当使用PatternLayout来自定义信息格式时使用, 用来确定输出格式
log4j.appender.console.layout.ConversionPattern=[%-5p][%d{yyyy-MM-dd HH:mm:ss}] %c %L %m%n

#输出日志到文件
log4j.appender.file=org.apache.log4j.FileAppender
#输出文件路径
log4j.appender.file.File=d:/angular/workspace/log4j/logfile.txt
#输出端类型
log4j.appender.file.layout=org.apache.log4j.PatternLayout
#当输出端类型为PartternLayout时使用, 用来确定输出格式
log4j.appender.file.layout.ConversionPattern=[%-5p][%d{yyyy-MM-dd HH:mm:ss}] %c %L %m%n

#输出日志到指定大小的文件（大小达到指定大小后产生新文件）
log4j.appender.rollfile=org.apache.log4j.RollingFileAppender
#输出文件路径
log4j.appender.rollfile.File=d:/angular/workspace/log4j/logrollfile.txt
#输出端类型
log4j.appender.rollfile.layout=org.apache.log4j.PatternLayout
#当输出端类型为PartternLayout时使用, 用来确定输出格式
log4j.appender.rollfile.layout.ConversionPattern=[%-5p][%d{yyyy-MM-dd HH:mm:ss}] %c %L %m%n


